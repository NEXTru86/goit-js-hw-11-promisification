{"version":3,"sources":["task_3.js"],"names":["randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","delay","promise","Promise","resolve","reject","canProcess","setTimeout","id","logSuccess","arr","console","log","logError","warn","amount","then","catch"],"mappings":";AAIA,IAAMA,EAA4B,SAACC,EAAKC,GAC/BC,OAAAA,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAiBhDK,EAAkB,SAACC,GACfC,IAAAA,EAAQR,EAA0B,IAAK,KAatCS,OAXS,IAAIC,QAAQ,SAACC,EAASC,GAC5BC,IAAAA,EAAaV,KAAKE,SAAW,GAEnCS,WAAW,WACHD,GACAF,EAAQ,CAACJ,EAAYQ,GAAIP,IAG7BI,EAAOL,EAAYQ,KACpBP,MAKLQ,EAAa,SAACC,GAClBC,QAAQC,IAAmBF,eAAAA,OAAAA,EAAI,GAAmBA,kBAAAA,OAAAA,EAAI,GAAtD,QAGIG,EAAW,SAAAL,GACfG,QAAQG,KAAqCN,gCAAAA,OAAAA,EAA7C,+BAaFT,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,KAC/BC,KAAKP,GACLQ,MAAMJ,GAETd,EAAgB,CAAES,GAAI,GAAIO,OAAQ,MAC/BC,KAAKP,GACLQ,MAAMJ","file":"task_3.2fde6a78.js","sourceRoot":"..\\src","sourcesContent":["// Задание 3\r\n// Перепиши функцию makeTransaction() так, чтобы она не использовала callback-функции onSuccess и onError, \r\n// а принимала всего один параметр transaction и возвращала промис.\r\n\r\nconst randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\n// const makeTransaction = (transaction, onSuccess, onError) => {\r\n//   const delay = randomIntegerFromInterval(200, 500);\r\n\r\n//   setTimeout(() => {\r\n//     const canProcess = Math.random() > 0.3;\r\n\r\n//     if (canProcess) {\r\n//       onSuccess(transaction.id, delay);\r\n//     } else {\r\n//       onError(transaction.id);\r\n//     }\r\n//   }, delay);\r\n// };\r\n\r\nconst makeTransaction = (transaction) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n    \r\n    const promise = new Promise((resolve, reject) => {\r\n        const canProcess = Math.random() > 0.3;\r\n        \r\n        setTimeout(() => {\r\n            if (canProcess) {\r\n                resolve([transaction.id, delay]);\r\n            }\r\n\r\n            reject(transaction.id);\r\n        }, delay);\r\n    });\r\n    return promise;\r\n};\r\n\r\nconst logSuccess = (arr) => {\r\n  console.log(`Transaction ${arr[0]} processed in ${arr[1]}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n/*\r\n * Работает так\r\n//  */\r\n// makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\r\n// makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\r\n// makeTransaction({ id: 72, amount: 75 }, logSuccess, logError);\r\n// makeTransaction({ id: 73, amount: 100 }, logSuccess, logError);\r\n/*\r\n * Должно работать так\r\n */\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n  .catch(logError);"]}